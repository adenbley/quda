include ../make.inc

QUDA = libquda.a
QUDA_OBJS = color_spinor_field.o cpu_color_spinor_field.o cuda_color_spinor_field.o \
	dirac.o dirac_wilson.o dirac_clover.o dirac_staggered.o\
	clover_quda.o gauge_quda.o inv_bicgstab_quda.o inv_cg_quda.o interface_quda.o \
	util_quda.o dslash_quda.o blas_quda.o mpicomm.o exchange_face.o

# header files, found in include/
QUDA_HDRS = blas_quda.h clover_quda.h dslash_quda.h enum_quda.h gauge_quda.h \
	invert_quda.h quda.h quda_internal.h util_quda.h \
	dirac.h color_spinor_field.h mpicomm.h exchange_face.h 

# files containing complex macros and other code fragments to be inlined,
# found in lib/
QUDA_INLN = check_params.h clover_def.h dslash_def.h dslash_staggered_def.h	\
	dslash_textures.h io_spinor.h read_clover.h read_gauge.h	\
	reduce_complex_core.h reduce_core.h reduce_triple_core.h dslash_constants.h

# files generated by the scripts in lib/generate/, found in lib/dslash_core/
# (The current clover_core.h and dslash_staggered_core.h were edited by hand.)
QUDA_CORE = clover_core.h dslash_core.h dslash_dagger_core.h dslash_staggered_core.h

INC += -I../include -Idslash_core -I.

HDRS = $(QUDA_HDRS:%=../include/%)
HDRS += $(QUDA_INLN)

CORE = $(QUDA_CORE:%=dslash_core/%)

all: $(QUDA)

$(QUDA): $(QUDA_OBJS)
	ar cru $@ $(QUDA_OBJS)

gen:
	$(PYTHON) generate/dslash_cuda_gen.py

clean:
	-rm -f *.o $(QUDA)

mpicomm.o: mpicomm.cpp
	$(MPICXX) $(CXXFLAGS) -DMPICH_IGNORE_CXX_SEEK $< -c -o $@
%.o: %.cpp $(HDRS)
	$(CXX) $(CXXFLAGS) $< -c -o $@

blas_quda.o: blas_quda.cu blas_param.h $(HDRS)
	$(NVCC) $(NVCCFLAGS) --maxrregcount=80 $< -c -o $@

%.o: %.cu $(HDRS) $(CORE)
	$(NVCC) $(NVCCFLAGS) $< -c -o $@

.PHONY: all gen clean
